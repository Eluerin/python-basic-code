///////目录、python基础数据类型（目录）
int, float, bool
str：字符串******
list：列表*****
tuple：元组（简单了解）
set：
dict：字典******
bytes：****
运算符：
文件操作：
......
注：需要记忆的内容较多
    后面的学习会经常使用

1、
int：整数，加减乘除、大小比较
float：浮点数，
bool:广泛应用于循环
见py2.py line36

2、字符串str
2.1、格式化字符串(3种，建议用f-string)
line 46-

2.2、索引和切片
索引：按照位置提取元素
    # print(s[2])     # 程序员都是从0开始数
    # print(s[0])
    # print(s[-1])    # 表示倒数（第一）
切片：从一个字符串中提取一部分内容
    # print(s[:9])  # 如果start从开头进行切片，可以省略开头
    # print(s[9:])  # 从start一直截取到末尾
    # print(s[:])   # 表示开头到结尾
line 84

2.3、字符串的常用操作
(字符串的操作一般不会对原字符串产生影响，一般是返回一个新的字符串)
    x.capitalize() 字符串首字母大写
    x.title()   每个单词首字母大写
    x.lower()   所有字母小写
    x.upper()   所有字母大写
line 86-124

2.4、字符串的替换和切割（*）
    strip()   去掉字符串左右两侧的空白符（空格、\t、\n）
    replace(old,new)     字符串替换
    split('')   字符串切割,用什么切割，就会损失掉谁
line 156

2.5、字符串的查找和判断
查找：    .find('') 查找，找不到返回-1
         .index('') 查找，找不到报错
判断：    .startswith(‘') 判断开头字符
         .isdigit()     判断是是否由整数组成
         in, not in
line 183

3、列表lst：
    能装东西的东西（用[]表示，列表中的元素通过，隔开）
3.1、增删改查
增:
    .append('')   追加
    .insert(index,object)     插入
    .extend(['','',''])   合并两个列表,批量添加
删:
    .pop(index)   给出被删除的索引,返回被删除的元素(通过赋值给变量实现查看被删除元素)

        ****python的优势，支持简单公式下的多项操作*******（如line254、line296）

    ，remove('')  直接删除想要删除的元素
改：
    lst[3] = ''   直接通过索引进行修改操作
查
    print(lst[4])  ......
line237-280

3.2、补充操作
排序  .sort()
     .sort(reserve)
嵌套查询
       lst[2][3]:外侧列表第三个元素中,内侧列表第四个元素
循环删除
    将要删除的内容保存在一个新列表中,循环新列表,删除原列表
line282-313


4、元组（tuple）:不可变的列表
line329-347


5、set 集合
# unhashable:
# python中的set集合进行数据存储的时候,需要对数据进行hash计算,根据计算的hash值进行存储数据
#   set集合要求存储的数据必须是可以进行hash计算的
#  可以hash的数据类型:不可变的数据类型,
#  include: int,str,bool,tuple,
# 不包括: list,dict,set

5.1、set的增删改查
    .add('')  :增加元素
    .remove('')
    set的修改,需要先删除,再新增
    set的查询只能通过for循环
line 358

5.2、set集合的交集、并集、差集
    交集：a & b  或者 a.intersection(b)
    并集：a | b  或者 a.union(b)
    差集：a - b  或者 a.difference(b)
line 350-403


6、dict 字典
6.1、字典是以键值对的形式进行存储数据的的
    键--值
    字典的表示方式：{key：value, key2:value, key3:value}
         key:  hashable
         value:  not hashable
line415-427

6.2、字典的增删查改
   dic['key'] = value    增、改
   dic.pop('key')        删
   del dic['key']
   dic.setdefault('':'') 增
   dic['key']            查
   dic.get('key')        查
line417-475

6.3、字典取值与循环遍历
     list(dic.key())
     list(dic.values())         分别提取字典的key和value到两个列表中
     for循环可以实现挨个取值  dic.items()   返回（key，value)的元组，直接用连携操作 (line514）
line477-515

6.4、嵌套
    直接用dic['key']['key']['key']['key']
    字典中可以嵌套列表
line 517-543

6.5、字典的循环删除（参考列表）
line 545-552


7、字符集和编码
7.1、Ascll码：
    0 1 => 01011000 => 二进制转化 => 88
    电脑如何存储文字信息
    01011000 <==> X  (ASCLL码，共编排128个，只需要7个0和1，长度共8位)
    所以一个ascll码被称为一个字节

7.2、ANSI标准：
# 存在符号放不下的问题，所以改进：
    ansi => 一套标准，每个字符占 16bit，2byte
    （00000000 01111111）--表示2^16(65536)个符号
# 中国，gb2312，编码 -> gbk编码(windows默认) -> gb18030
    如：01000000 01111111 -> 中
# 台湾，big5，编码
# 日本，JIS编码
    如：01000000 01111111 -> え(不通用)

7.3、unicode（万国码）：
    早期unicode没有意识到这个问题，UCS-2 2个字节
    进行了扩充，UCS-4 4个字节
    00000000 00000000 00000000 01111111
    存在两个问题：
    1】英文会增加到4倍内存(浪费资源)
    2】难以应用在计算机上，如传输

7.3.2、utf、utf-8、utf-16
    utf：是可变长度的unicode，可以进行数据的传输和存储
    utf-8：最短的字节长度为8（mac默认）
           英文：8bit 1byte
           欧洲文字：16bit，2byte
           中文：24bit，3byte
    utf-16：最短的字节长度为16

gbk和utf-8 不能直接进行转化
想要转化，需要进行解密

8、bytes：
    程序员平时遇见的所有的数据最终单位都是字节byte





